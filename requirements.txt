기능 요구
1. 디스코드 봇
	a. 사용자가 디스코드 채팅에서 /ping(/핑)과 같은 간단한 명령어로 봇의 반응을 테스트할 수 있어야 한다.
	b. 봇은 디스코드 음성 채널에 연결해 음악을 재생하고 끌 수 있어야 한다.
	c. 봇은 사용자가 음성 채널에서 노래를 재생, 일시 정지, 정지, 스킵 할 수 있는 명령어를 제공해야 한다.

2. 음악 재생 기능
	a. /play(/p, /재생) <유튜브 링크/검색어> 명령어를 사용하여 유튜브에서 노래를 찾아 재생할 수 있어야 한다.
	b. 재생 중인 음악을 /stop(/정지) 명령어로 끄거나 /skip(/s, /스킵) 명령어로 건너뛸 수 있어야 한다.
	c. /list(/queue, /목록) 명령어로 현재 대기 중인 음악 리스트를 확인할 수 있어야 한다.
	d. /pause(/일시정지) 명령어로 음악을 일시 정지하고, /resume(/재개) 명령어로 음악을 다시 재개할 수 있어야 한다.

3. 대기열 및 자동 재생
	a. 대기열에 여러 곡을 추가하고, 첫 번째 곡이 끝나면 자동으로 다음 곡이 재생될 수 있어야 한다.
	b. 대기열에 있는 곡을 /remove(/삭제) <곡 번호>로 제거할 수 있어야 한다.
	c. 음성 채널에 접속한 사용자가 없으면 자동으로 봇이 퇴장해야 한다.

4. 에러 처리
	a. 음악이 재생되지 않거나 오류가 발생할 경우 사용자에게 알림 메시지를 보내야 한다.
	b. 잘못된 명령어 입력 시 사용자가 무엇을 잘못했는지에 대한 피드백을 제공해야 한다.

5. 로그 시스템
	a. 봇의 활동 로그를 bot.log 파일로 기록하여 관리자가 문제 발생 시 확인할 수 있게 해야 한다.
	b. 사용자의 봇 제어 활동을 기록하여 추천 시스템에 활용할 수 있게 한다.

비기능 요구
1.	성능 (Performance)
	a. 봇은 다수의 사용자가 동시에 명령어를 실행해도 높은 성능을 유지해야 한다.
	b. 음성 채널에서의 음악 스트리밍은 버퍼링 없이 원활히 이루어져야 한다.
2.	확장성 (Scalability)
	a. 향후 다양한 스트리밍 서비스(스포티파이 등)와 연동할 수 있도록 확장할 수 있어야 한다.
	b. 새로운 기능(예: 추천 시스템, 자동 큐 기능 등)을 추가할 때 기존 코드에 영향을 최소화해야 한다.
3.	신뢰성 (Reliability)
	a. 봇은 24시간 이상 안정적으로 작동할 수 있어야 하며, 오류 발생 시 자동으로 재시작되는 시스템을 갖추어야 한다.
	b. 디스코드 서버에서 봇이 음성 채널에 입장하고, 퇴장하는 과정에서 오류가 발생하지 않아야 한다.
4.	보안 (Security)
	a. 봇의 API 토큰, 유저 정보 등 중요한 데이터를 .env 파일에 저장하고 Git에 올리지 않도록 해야 한다.
	b. 악의적인 사용자가 봇을 오용할 수 없도록 /관리자 같은 명령어를 구현하여 권한 관리가 필요하다.
5.	사용성 (Usability)
	a. 봇 명령어는 간단하고 직관적으로 설계되어야 한다.
	b. 사용자에게 잘못된 명령어 입력 시 친절한 오류 메시지와 함께 사용 방법을 안내해야 한다.
6.	배포 (Deployment)
	a. Docker 또는 AWS EC2 등을 사용하여 봇을 쉽게 배포할 수 있어야 한다.
	b. 배포 후에는 자동화된 테스트를 통해 봇이 제대로 작동하는지 확인할 수 있어야 한다.
